/*
 * This file is part of DisplayRT.
 *
 * Copyright (C) 2024-2025 Keran Ye <keran.ye@email.ucr.edu>
 *
 * DisplayRT is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DisplayRT is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DisplayRT. If not, see <https://www.gnu.org/licenses/>.
 *
 * Author(s): 
 * - Keran Ye (keran.ye@email.ucr.edu)
 * 
 * The content of this file is about testing multiple-window display using DisplayRT. 
 * The display property is generated by the custom yaml parer. 
 * The real time data is broadcast through LCM.
 */

#include <memory>
#include <iostream>
#include <filesystem>

#include <QtWidgets/QApplication>
#include <QtWidgets/QMainWindow>
#include <QtWidgets/QGridLayout>
#include <QtCore/QTimer>

// #include "qcustomplot.h"
#include "displayRT.h"
#include "displayRT_parser.h"

#include <lcm/lcm-cpp.hpp>
#include "lcm/msg/example/imu_sensor_t.hpp"
#include "lcm/msg/example/revolute_servo_t.hpp"


using namespace display_rt; // for DisplayRT

class myDisplayRT : public DisplayRT
{
public: 
    myDisplayRT( const std::shared_ptr<DisplayRT_Property> monitor_property )
    : DisplayRT(monitor_property)
    {
    }

    Status Setup() override
    {
        DisplayRT::defaultSetupDisplay();
        return Status::NORMAL;
    }    

    Status Update() override
    {
        DisplayRT::defaultUpdateDisplay();
        return Status::NORMAL;
    }

private: 
    // LCM
    std::shared_ptr<lcm::LCM> lcm_;
    
};

int main(int argc, char *argv[])
{
    // parser
    std::string path = std::filesystem::current_path().string() + "/../example/MultiwindowPlotWithParsedDisplayRT/config.yaml";
    // std::string path = std::filesystem::current_path().string() + "/config.yaml";
    // print out the path
    std::cout << "\nconfig file path: " << path << std::endl;

    Yaml::Node parser;
    std::shared_ptr<DisplayRT_Parser> display_parser = std::make_shared<DisplayRT_Parser>();
    auto display_property = display_parser->parseConfiguration( path, parser );

    // display
    auto display = std::make_shared<myDisplayRT>( display_property ); 
    display->Initial( argc, argv); 
    display->Setup();
    display->Start(); 

    return 0; 
}