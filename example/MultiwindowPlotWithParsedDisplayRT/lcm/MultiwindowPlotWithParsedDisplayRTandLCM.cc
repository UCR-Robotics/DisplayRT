/*
 * This file is part of DisplayRT.
 *
 * Copyright (C) 2024-2025 Keran Ye <keran.ye@email.ucr.edu>
 *
 * DisplayRT is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DisplayRT is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DisplayRT. If not, see <https://www.gnu.org/licenses/>.
 *
 * Author(s): 
 * - Keran Ye (keran.ye@email.ucr.edu)
 * 
 * The content of this file is about testing multiple-window display using DisplayRT. 
 * The display property is generated by the custom yaml parer. 
 * The real time data is broadcast through LCM.
 */

#include <memory>
#include <iostream>
#include <filesystem>
#include <thread>

#include <QtWidgets/QApplication>
#include <QtWidgets/QMainWindow>
#include <QtWidgets/QGridLayout>
#include <QtCore/QTimer>

// #include "qcustomplot.h"
#include "displayRT.h"
#include "displayRT_parser.h"

#include <lcm/lcm-cpp.hpp>

#include "myDisplayWithLCM.h"


using namespace display_rt; // for DisplayRT

int main(int argc, char *argv[])
{
    // LCM publisher thread 
    std::thread t0( 
        [&]{
            std::shared_ptr<display_rt::example::myPublisherLCM> publisher = std::make_shared<display_rt::example::myPublisherLCM>();

            // loop for LCM and to catch exceptions
            while( true )
            {
                try
                {
                    publisher->runOnce();
                }
                catch (const std::exception &e)
                {
                    std::cerr << "Exception: " << e.what() << std::endl;
                }

                // sleep for 10 ms
                std::this_thread::sleep_for(std::chrono::milliseconds(500));
            }
        }
    );

    // LCM subscriber thread
    // std::thread t1( 
    //     [&]{
    //         std::shared_ptr<display_rt::example::mySubscriberLCM> subscriber = std::make_shared<display_rt::example::mySubscriberLCM>();

    //         // spin for LCM subscriber
    //         while( true )
    //         {
    //             try
    //             {
    //                 subscriber->spinOnce();
    //             }
    //             catch (const std::exception &e)
    //             {
    //                 std::cerr << "Exception: " << e.what() << std::endl;
    //             }

    //             // sleep for 10 ms
    //             std::this_thread::sleep_for(std::chrono::milliseconds(100));
    //         }
    //     }
    // );

    // myDisplayRT
    // parser
    std::string path = std::filesystem::current_path().string() + "/../example/MultiwindowPlotWithParsedDisplayRT/config.yaml";
    // std::string path = std::filesystem::current_path().string() + "/config.yaml";
    // print out the path
    std::cout << "\nconfig file path: " << path << std::endl;

    Yaml::Node parser;
    std::shared_ptr<DisplayRT_Parser> display_parser = std::make_shared<DisplayRT_Parser>();
    auto display_property = display_parser->parseConfiguration( path, parser );

    std::thread t2( 
        [&]{
            // display
            auto display = std::make_shared<display_rt::example::myDisplayRT>( display_property ); 
            display->Initial( argc, argv); 
            display->Setup();
            display->Start(); 
        }
    );


    // // parser
    // std::string path = std::filesystem::current_path().string() + "/../example/MultiwindowPlotWithParsedDisplayRT/config.yaml";
    // // std::string path = std::filesystem::current_path().string() + "/config.yaml";
    // // print out the path
    // std::cout << "\nconfig file path: " << path << std::endl;

    // Yaml::Node parser;
    // std::shared_ptr<DisplayRT_Parser> display_parser = std::make_shared<DisplayRT_Parser>();
    // auto display_property = display_parser->parseConfiguration( path, parser );

    // // display
    // auto display = std::make_shared<myDisplayRT>( display_property ); 
    // display->Initial( argc, argv); 
    // display->Setup();
    // display->Start(); 

    t0.join();
    // t1.join();
    t2.join();

    return 0; 
}