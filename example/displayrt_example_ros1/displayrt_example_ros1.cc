/*
 * This file is part of DisplayRT.
 *
 * Copyright (C) 2024-2025 Keran Ye <keran.ye@email.ucr.edu>
 *
 * DisplayRT is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DisplayRT is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DisplayRT. If not, see <https://www.gnu.org/licenses/>.
 *
 * Author(s): 
 * - Keran Ye (keran.ye@email.ucr.edu)
 * 
 * The content of this file is about testing multiple-window display using DisplayRT. 
 * The display property is generated by the custom yaml parer. 
 * The real time data is broadcast with custom messages through ROS1.
 */

#include <memory>
#include <iostream>
#include <filesystem>
#include <thread>
#include <chrono>
#include <cstdlib>
#include <string>

#include <QtWidgets/QApplication>
#include <QtWidgets/QMainWindow>
#include <QtWidgets/QGridLayout>
#include <QtCore/QTimer>

// displayrt
#include "displayRT.h"
#include "displayRT_parser.h"

#include "myDisplayWithROS1.h"

// ROS1 
#include "ros/ros.h"
#include "std_msgs/String.h"


using namespace display_rt; // for DisplayRT
using namespace std::chrono_literals;
using std::placeholders::_1;

class PublisherNode
{
public:
    PublisherNode()
    {
        // Initialize the ROS publisher
        pub_ = nh_.advertise<std_msgs::String>("chatter", 1000);
    }

    void run()
    {
        ros::Rate loop_rate(10); // 10 Hz
        int count = 0;

        while (ros::ok())
        {
            std_msgs::String msg;
            std::stringstream ss;
            ss << "Hello world " << count++;
            msg.data = ss.str();

            ROS_INFO("[Publisher] Publishing: %s", msg.data.c_str());
            pub_.publish(msg);

            ros::spinOnce();
            loop_rate.sleep();
        }
    }

private:
    ros::NodeHandle nh_;
    ros::Publisher pub_;
};

class SubscriberNode
{
public:
    SubscriberNode()
    {
        // Initialize the ROS subscriber
        sub_ = nh_.subscribe("chatter", 1000, &SubscriberNode::callback, this);
    }

    void run()
    {
        ros::spin(); // Keep processing callbacks
    }

private:
    void callback(const std_msgs::String::ConstPtr &msg)
    {
        ROS_INFO("[Subscriber] Received: %s", msg->data.c_str());
    }

    ros::NodeHandle nh_;
    ros::Subscriber sub_;
};

int main(int argc, char *argv[])
{
    std::string new_config_path;

    { // get config file path
      // current working directory
      std::filesystem::path cwd = std::filesystem::current_path();

      // std::string new_config_path;
      if (argc > 1)
      {
        // loop through command line arguments
        for (int i = 1; i < argc; i++)
        {
          // check if the argument is path-to-build
          if (std::string(argv[i]) == "-path-to-config")
          {
            // check if the next argument is the path
            if (i + 1 < argc)
            {
              // set the new_library_path to the next argument
              new_config_path = std::string(argv[i + 1]);
              continue;
            }
          }
        }

        // check if the new_config_path is set
        if (new_config_path.empty())
        {
          throw std::runtime_error("Please provide the relative path to the config file using the command line argument '-path-to-config <path>'");
        }
      }
      else
      {
        throw std::runtime_error("Please provide the relative path to the build directory using the command line arguments '-path-to-config <path>'");
      }

      // combine the new_config_path with the current working directory
      new_config_path = (cwd / new_config_path).string();
    }

    ros::init(argc, argv, "displayrt_example_ros1_node");

    // myPublisherROS2 thread
    std::thread t1(
        [&]{
            std::shared_ptr<display_rt::example::myPublisherROS1> publisher = std::make_shared<display_rt::example::myPublisherROS1>();

            // spin for ROS2 publisher
            while( ros::ok() )
            {
                try
                {
                    publisher->runOnce();
                }
                catch (const std::exception &e)
                {
                    std::cerr << "Exception: " << e.what() << std::endl;
                }

                // sleep for 20 ms
                std::this_thread::sleep_for(std::chrono::milliseconds(20));
            }
        }
    );

    // // mySubscriberROS2 thread
    // std::thread t2(
    //     [&]{
    //         std::shared_ptr<display_rt::example::mySubscriberROS2> subscriber = std::make_shared<display_rt::example::mySubscriberROS2>();

    //         // spin for ROS2 subscriber
    //         while( rclcpp::ok() )
    //         {
    //             try
    //             {
    //                 subscriber->spinOnce();
    //             }
    //             catch (const std::exception &e)
    //             {
    //                 std::cerr << "Exception: " << e.what() << std::endl;
    //             }

    //             std::this_thread::sleep_for(std::chrono::milliseconds(50));
    //         }
    //     }
    // );

    // myDisplayRT thread
    // print out the path
    std::cout << "\nconfig file path: " << new_config_path << std::endl;

    Yaml::Node parser;
    std::shared_ptr<DisplayRT_Parser> display_parser = std::make_shared<DisplayRT_Parser>();
    auto display_property = display_parser->parseConfiguration( new_config_path, parser );

    std::thread t3(
        [&]{
            // display
            auto display = std::make_shared<display_rt::example::myDisplayRT_ROS2>( display_property );
            display->Initial( argc, argv); 
            display->Setup();
            display->Start(); 
        }
    );

    t1.join();
    // t2.join();
    t3.join();

    ros::shutdown();

    return 0;
}